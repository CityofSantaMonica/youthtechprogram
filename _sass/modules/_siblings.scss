/// Apply the specified CSS to the elements based on the number of siblings the element has.
///
/// @access  public
/// @content
///
/// @link    http://stackoverflow.com/a/12198561/1239484
///
/// @param   {integer | string} - An exact number of siblings the target element must have or you may pass "odd" or "event" values
/// @param   {string} - The target element, whether it be an HTML element or a class. Classes should be passed as a quote **including** the period or pound sign.
@mixin siblingsCountRelative($count, $classOrElement) {
    #{$classOrElement}:first-child:nth-last-child(#{$count}),
    #{$classOrElement}:first-child:nth-last-child(#{$count}) ~ #{$classOrElement} {
        @content;
    }
}

/// Apply the specified CSS to the elements based on the number of siblings the element has. This function places the
/// content with `@at-root` disregarding nesting.
///
/// @access  public
/// @content
///
/// @link    http://stackoverflow.com/a/12198561/1239484
///
/// @param   {integer | string} - An exact number of siblings the target element must have or you may pass "odd" or "event" values
/// @param   {string} - The target element, whether it be an HTML element or a class. Classes should be passed as a quote **including** the period or pound sign.
@mixin siblingsCountAbsolute($count, $classOrElement) {
    @at-root {
        @include siblingsCountRelative($count, $classOrElement) {
            @content;
        }
    }
}